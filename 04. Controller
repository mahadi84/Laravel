Date: 31-Aug-2023

00. Functions: 
            FIRST(),WHERE, LIKE, ORDER BY, INSERT ALL FIELDs except ONE, GET ONLY TWO FIELDs FROM A TABLE,
01. How to VALIDATE input fields, CUSTOMIZE validation message, REDIRECT if the validation fails and Laravel, Ajax/Javascript Redirect?
02. How to Minus Multiple Data from Another/SAME Table? Ex: From Stock to Order-Done table
03. How to insert MULTIPLE data into the second table collecting the Other table's last inserted ID? Ex: Order and Order Details table

04. How to use CreateOrUpdate(), what's the advantage of using it, the simple exception to using it?
05. USE OF SESSION CLASS AND FUNCTIONs?


============================== 00. Functions:  =============================
Model::First(); **Only Return the first row of the table.
WHERE('email', 'like',  '%'.Request::get('email').'%')->get();
WHERE('product_id', $request->product_id)->get()->orderBy('created_at');

Employee::get(['emp_id','name']); 
Employee::create($request->except('_token'));

 $transaction = Transaction::create([
                'quantity' => $request->quantity,
                'buyer_id' => $buyer->id,
                'product_id' => $product->id,
            ]);



========================= 01.How to VALIDATE input fields, CUSTOMIZE validation message, REDIRECT if the validation fails and Laravel, Ajax/Javascript Redirect?======================
 
REGULAR VALIDATION:----
$user= User::findOrFail($id);
  $request->validate([
      'image.*' => ['image','mimes:jpg,png,jpeg', 'max:2048','dimensions:min_width=520, min_height=520, max_width=530, max_height=520'], **For Multiimage
      'email'  => ['max:6','confirmed','email','unique:users,email,'.$user->id],
      'seo_title' => ['nullable','max:200'],
      'product_id' => ['integer'], **numeric for price/salary etc.
       ],
       [ 'email.required' => 'Put your email here' ]); 
);

VALIDATE AND REDIRECT IF FAILS TO VLAIDATE:------
    use Illuminate\Support\Facades\Validator;
    public function submit(Request $request){
            $validator = Validator::make($request->all(),[
                'name' => 'required|min:2',
                'phonenumber' => 'required|min:10|max:10'
            ],           
                if ($validator->fails()) {
                    return redirect(url()->previous() .'#contact')
                            ->withErrors($validator)
                            ->withInput();
                }

INSERT: $product->seo_title = empty(!$request->seo_title) ? $request->seo_title : ''; 
UPDATE: $product->seo_title = empty(!$request->seo_title) ? $request->seo_title : $product->seo_title;

LARAVEL-REDIRECTS:--
       return redirect()->back()->with('success', "Job: {$job->job_title} - registered successfull.");
       return redirect('/')->with('success', 'You are logged out!!');
       return redirect()->route('admin.product.index')->with('success', 'Update successfull.');  **route name
       return redirect("admin/employees")->with('success', 'Update successfull.'); **url 

AJAX/JAVASCRIPT-REDIRECTS:--
      return response(['status'=>'success', 'message'=>'Data inserted successfully');
      return response()->json(['exists' => true]);


========================== 02. How to Minus Multiple Data from Another Table? Ex: From Stock to Order-Done table ====================================

$OrderDetails = $this->OrderDetailsModel->where('order_tbl_id', $id)->get();
             foreach($OrderDetails as $det){
                $update  = $this->ProductModel
                            ->where('id', $det->product_tbl_id)
                            ->update(['quantity' => DB::raw('quantity -'.$det->product_qty)]);
                //**Below query not working in this case
                // $product = $this->ProductModel->where('id', $det->product_tbl_id)->get();
                // $product->quantity = ($product->quantity-$det->product_qty);
                // $update  = $product->save();
             }

SAME-TABLE:
return DB::transaction(function () use ($request, $product, $buyer) {
            $product->quantity -= $request->quantity;
            $product->save();

 APPSERVICEPROVIDER:          
Product::updated( function($product){
            if ($product->quantity == 0 && $product->isAvailable()) {
                $product->status= Product::UNAVAILABLE_PRODUCT;
                $product->save();
            }
        });

======================== 03. How to insert data into the second table collecting the Other table's last inserted ID? Ex: Order and Order Details table ==========

$order=$this->OrderModel; 
        $order->total           = $request->total;
        $order->paid_ammount    = $request->paid_ammount;
        $order->due             = $due;
        
        if ($order->save()) {
            $contents= Cart::content();
                foreach($contents as $content){                   
                    $orderDetails= new OrderDetails(); //must have to create 'new model' inside the loop
                        $orderDetails->order_tbl_id   = $order->id; 
                        $orderDetails->product_tbl_id = $content->id;
                        $orderDetails->product_qty    = $content->qty;
                    $insert= $orderDetails->save();
                }


===============================04. How to use CreateOrUpdate() what's the advantage of using it, the simple exception to using it? ===================================

CONTROLLER:-----------
public function generalSettingUpdate(Request $request)
    {
        // dd($request->all());
        $request->validate([
            'site_name'     => ['required', 'max:200']
        ]);

        GeneralSetting::updateOrCreate(
            ['id' => 1],
            [ 'site_name'=> $request->site_name ]
        );

MODEL:-----------
protected $filable=['id', 'site_name']



================05. Session(Class vs Function):==============

use Illuminate\Support\Facades\Session;

CLASS:------
Session::put('coupon',['coupon_name' => $coupon->name,'discount' => $coupon->discount])
Session::has('coupon')
Session::get('coupon')['discount'];
Session::forget('coupon')

FUNCTION:----
session()->has('coupon')
session()->get('coupon')['discount'];
















============================== CRUD  and Excell download ==========================
<?php
// Excel service provider
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\JobsExport;

class JobController extends Controller
{
   public function all(Request $request){
        $data['title'] = 'Job list';
        $data['jobs'] = Job::getJobs($request);
        return view('Backend.Job.AllJobs.alljobs', $data);
    }

    public function export_jobs(Request $request){
       return Excel::download(new JobsExport, 'jobs.xlsx');
    }
}

============================ RESET Password Controller ==============================================

BLADE:---
<input type="password" name="current_password" class="form-control" >
<input type="password" name="password" class="form-control" >
<input type="password" name="password_confirmation" class="form-control" >


CONTROLLER:--
    public function updatePassword(Request $request){
        $request->validate([
            'current_password' => ['required', 'current_password'],
            'password' => ['required','confirmed', 'min:8']
        ]);

        $request->user()->update([
            'password' => $request->password
        ]);

        return redirect()->back()->with('success', 'Your Password Updated Successfully!');
    }





=================================================== LOGIN CONTROLLER ===========================================
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use Auth;
use Hash;
use Str;


class LoginController extends Controller
{

        private $model;

        public function __construct(){
            $this->model = new  \App\Models\User;
        }

    public function login(){

        if (empty(Auth::User()->id)) {
            $data['title'] = 'Login';
             return view('Login.login', $data);
        }
        else {
            return redirect('admin/dashboard');
        }
    }

    public function login_post(Request $request){

        if (Auth::attempt([
            'email'=>$request->email,
            'password'=>$request->password], true)) 
        {
            if (!empty(Auth::User()->status)) {
               
                    if (Auth::User()->is_role == '1') {
                        return redirect()->intended('admin/dashboard');
                    }else {
                        return redirect()->back()->with('error', 'You are not a HRM');
                    }
               
            } else {
                $user_id=Auth::user()->id;
                Auth::logout();
                $user=$this->model->find($user_id);
                return redirect()->back()->with('error', 'Your account is Inactive');

            }
                    
        } else {
            return redirect()->back()->with('error', 'Please enter the correct credentials');
        }

    }

    public function logout(){
            Auth::logout();                
            return redirect('/')->with('success', 'You are logged out!!');

    }

    public function register(){
          $data['title'] = 'Register';
        return view('Login.register', $data);
    }

    public function register_post(Request $request){
         $user= $request->validate([
           'name'                   => "required|min:3",
           'email'                  => "required|unique:users|max:100",
           'password'               => 'required',
           'confirm_password'       => 'required_with:password|same:password',
           'phone'                  => 'required|unique:users|string|digits:11',
           'hire_date'              => 'required',
           'job_title'              => 'required',
           'manager_name'           => 'required',
           'dept'                   => 'required'
        ]);

        $user                   = $this->model;
        $user->name             = $request->name;
        $user->email            = $request->email;
        $user->password         = $request->password;
        $user->phone            = $request->phone;
        $user->hire_date        = $request->hire_date;
        $user->job_title        = $request->job_title;
        $user->manager_name     = $request->manager_name;
        $user->dept             = $request->dept;
        $user->remember_token   = Str::random(50);

            if($user->save()) {
                return redirect()->back()
                                 ->with('success', "User: {$user->name} - registered successfull.");           
            }else {
                 return redirect()->back()
                                 ->with('error', 'Faild !! Something went wrong.');
            }     
    }


    public function CheckEmail(Request $request){
        $email= $request->email;
        $isExists= $this->model->where('email', $email)->first();
        if ($isExists) {
            return response()->json(array("exists" => true));
        } else {
            return response()->json(array("exists" => false));
        }
    }
    
    public function edit_user(){
          $data['title'] = 'Edit user';
        return view('Login.register', $data);
    }


    public function forgot_password(){
        $data['title'] = 'Fortgot password';
        return view('Login.forgot_password', $data);
    }


}



