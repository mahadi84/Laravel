Date: 11-Oct-2023

01. EXPORT & IMPORT with Matlab Excell.
02. Auto Unique ID Generator.
03. Create PDF with DOMpdf

04. Spatie Permission.
05. Spatie Backup Database
06. Yajra Datatable 


07. Use of Toaster
08. Use of SweetAlert2


=================== 01. EXPORT & IMPORT with Matlab Excell ====================

-------Controller:-----------
use Maatwebsite\Excel\Facades\Excel;
use App\Excel\Employees\Export\ExportEmployees;
use App\Excel\Employees\Import\ImportEmployees;

public function employee_import(Request $request){
    $data['title'] = 'Import';
    return view('Pages.Employee.Import.employee_import', $data);
}

public function emp_salary_import_post(Request $request){
    if ($request->hasFile('file')){
                $request->validate(['file'  => ['required','mimes:xlsx']]);
        }
    Excel::import(new ImportEmpSalary, $request->file);            
    return redirect()->back()->with('success', 'Bulk Data Upload successfull.'); 
}

public function employee_export(Request $request){
  return Excel::download(new ExportEmployees, 'employee.xlsx');
}

--------------Route:--------------------
    Route::get('employee-import', 'employee_import'); 
    Route::post('employee-import-post', 'employee_import_post'); 
    Route::get('employee-export', 'employee_export'); 

------------Import Page and Button Blade:--------
<a href="{{url('employee-import')}}" class="btn btn-rounded  btn-primary btn-md"> Import</a>
<a href="{{url('employee-export')}}" class="btn btn-rounded btn-success btn-md"> Export</a>
<br>
<h4 class="card-title">Import Bulk Employee</h4><br>
  @include('_message')<br>                                 
<form action="{{ url('employee-import-post') }}" method="POST"  enctype="multipart/form-data">
        @csrf
        <div class="form-group">
            <label for="file">File:</label>
            <input  name="file" type="file"  id="file" class="form-control">
        </div><br>
    <button class="btn btn-rounded btn-success btn-md waves-effect waves-light">Import File</button>
    <a href="{{  url('employee')}}" class="btn btn-outline-primary btn-md waves-effect waves-light" type="button">Back</a>
</form> 

----------------Import Controller:---------------
<?php
namespace App\Excel\Employees\Import;
use App\Models\Employee;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
class ImportEmployees implements ToModel, WithHeadingRow{
    public function model(array $row){
        return new Employee([
            'emp_id'            => $row['emp_id'],
            'name'              => $row['name'],
        ]);
    }
}

------------Export Button-------------
<a href="{{ url('emp_salary-export?emp_id='.Request::get('emp_id'))}}" class="btn btn-rounded btn-success btn-md"> Export</a>
----------------Export-Page-Controller:-------
<?php
namespace App\Excel\Emp_Salary\Export;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Sheet;

use Request;

class ExportEmpSalary implements FromCollection, ShouldAutoSize, WithMapping, WithHeadings, WithEvents{

    private $model;
    public function __construct(){
        $this->model = new  \App\Models\EmpSalary;
    }


public function registerEvents(): array {
        return [ AfterSheet::class => [self::class, 'afterSheet']];
}

        public function collection(){           
        $request = Request::all();
        return $this->model->getSalary($request);
        }

        protected $index = 0;

        public function map($emp):array{
            // $createdAtFormat= date('d-m-Y', strtotime($job->created_at));
            return[
                ++$this->index,
                $emp->Employee->emp_id,
                $emp->Employee->name,
                $emp->salary,
                $emp->created_at->format('d-m-Y')
                // $createdAtFormat
            ];
        }

        public function headings():array{
            return ['S.No', 'Emp ID', 'Name','Salary', 'Created Date'];
        }

// -----For Style-------

public static function afterSheet(AfterSheet $event){
    Sheet::macro('styleCells', function (Sheet $sheet, string $cellRange, array $style) {
        $sheet->getDelegate()->getStyle($cellRange)->applyFromArray($style);
    });

    $event->sheet->styleCells(
                'A1:E1',[
                    //Set font style
                    'font' => ['name'=>'Calibri','size'=>13,'bold'=>  true,'color'=>['argb'=>'000000'],],
                    //Set background style
                    'fill' => ['fillType' => \PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID,
                        'startColor' => ['rgb' => 'C0BDBC']           
                    ],
                    //Set allignment
                    'alignment' => [
                        'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER, //_LEFT, _RIGHT
                    ],
                ]
            );
}


} //End-of-Class


 ?>



======================  02. Auto UNIQUE ID Generator =========================
Controller:-------
use Haruncpi\LaravelIdGenerator\IdGenerator;

$prefix = date('Y');  
$emp_id = IdGenerator::generate(['table' => 'employees', 'field' => 'emp_id', 'length' => 8, 'prefix' =>$prefix]);

To Use in MODEL when id is used a primary key:-------
public static function boot(){
        parent::boot();
        self::creating(function ($model) {
            $model->order_number = IdGenerator::generate(['table' => 'orders', 'length' => 6, 'prefix' => date('y')]);
        });
    }


==========================03. PDF with DOM PDF===================================
Controller:-------
use PDF;

public function employee_pdf_create(Request $request, $id){
     $data['emp'] = $this->employeeModel->find($id);                 
        $pdf = PDF::loadView('Pages.Employee.PDF.employee_pdf', $data)
                            ->setPaper('a4')
                            ->setOption([
                                'enable_remote' => true,
                                'tempDir' => public_path(),
                                'chroot' => public_path(),
                                    ]);     
        // return $pdf->download('employee.pdf');
        return $pdf->stream('EMPID-'.$data['emp']->emp_id.'.pdf');
    }

Blade:-------
Use <img> NOT <image>


========================== 04. Spatie Permission (To assign role to user) ===============================
Web-link: https://spatie.be/docs/laravel-permission/v5/introduction

INSTALL: composer require spatie/laravel-permission
ADD IN config/app.php: 'providers' => [    Spatie\Permission\PermissionServiceProvider::class,];
PUBLISH: php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"
RUN:  php artisan config:clear
MIGRATE:  php artisan migrate  (will create 5 package table)
**ADD field group_name to permission table
** GUARD_NAME will be WEB default for both role and permission table.
ADD TO USER MODEL: 
        use Spatie\Permission\Traits\HasRoles;
        class User extends Authenticatable{
            use HasApiTokens, HasFactory, Notifiable, HasRoles;

CONTROLLER (To CREATE ROLE, PERMISSION AND ASSIGN PERMISSIONS TO ROLE):
  use Spatie\Permission\Models\Role;
  use Spatie\Permission\Models\Permission;
  use App\Models\User;
  use DB;

USER:
  $User->assignRole($request->role_id);
  *Role will be removed automatically from user Once the user is deleted. 

ROLE:
  $data['Role'] = Role::all();
  $data['Role'] = Role::find($id);
  $data['Role'] = Role::get(['id','name']);
  $role = Role::create(['name' => $name]);
  $role = Role::find($id)->update(['name' => $name]);

  $role = Role::find($id);
  $role->syncPermissions($permission_id);
  $role->delete();

PERMISSION:
  $data['permission'] = Permission::get();
  $permission = Permission::create(['name' => $name]);
  $data['per'] = Permission::find($id);
  $permission = Permission::find($id)->update(['name' => $name]);

BLADE:
    $data['Permission_group'] = Permission::select('group_name')->groupBy('group_name')->get();
    ****Add function in user model to get all permission name
    public static function permissionNameByGroup($group_name){
            return  DB::table('permissions')
                ->select(['id','name'])
                ->where('group_name', $group_name)
                ->get();
        }

        --
INSERT Multiple data to Table:-------------
       $permission_id = $request->permission_id;
       $role_id = $request->role_id;
        foreach($permission_id as $p_id){
         DB::table()->create(['permission_id'=>$p_id,'role_id'=>$role_id]);
        }


========================== 05. Spatie Backup Database ===========================

Web-link: https://spatie.be/docs/laravel-backup/v8/installation-and-setup

01. INSTALLATION: composer require spatie/laravel-backup
02. PUBLIC: php artisan vendor:publish --provider="Spatie\Backup\BackupServiceProvider"

03. config/backup.php: 
'files' => [
                'include' => [
                    // base_path(), ********** Inactive this line
                ],
04. IN config/database.php: Add below array line in mysql array after 'engine' => null, 
'mysql' =>
            'dump' => [
               'dump_binary_path' => 'D:/xampp8.2/mysql/bin', // ********Change the link as per project
               'use_single_transaction',
               'timeout' => 60 * 5, // 5 minute timeout
            ],


05. CONTROLLER:

use File;
use Illuminate\Support\Facades\Storage;

    public function DatabaseBackup_All(){
        $data['title'] = 'Database Backup';
        return view('Admin.DatabaseBackup.All.databasebackup_all', $data)->with('files', File::allFiles(storage_path('/app/PAYROLE')));
        **** Backup-Database-File(s) store in storage/app/APP_NAME folder
    }
    public function DatabaseBackup_Now(){
        \Artisan::call('backup:run');
        return redirect()->back()->with('success', 'Back up file created successfull.');
    }

    public function DatabaseBackup_Download($getFilename){
        $path= storage_path('app\PAYROLE/'.$getFilename);
        return response()->download($path);       
        
    }

    public function DatabaseBackup_Delete($getFilename){
        $delete=Storage::delete('PAYROLE/'.$getFilename);
        if ($delete) {
            return redirect()->back()->with('success', 'File delete successfull.');
        }else{
            return redirect()->back()->with('error', 'Faild...!!');
        } 
    }

06. BLADE:
     @forelse($files as $key =>$file)
      <tr>
        <td>{{ ++$key }}</td>          
        <td>{{ $file->getFilename() }}</td>
        <td>{{ substr($file->getSize()/1024, 0, 4) }} KB</td>
        <td>{{ $file->getPath() }}</td>
        <td> <a href="{{url('DatabaseBackup_download/'.$file->getFilename())}}" class="btn btn-outline-primary btn-sm waves-effect waves-light" type="button">Download</a> 
          | <a href="{{url('DatabaseBackup_delete/'.$file->getFilename())}}" onclick="return confirm('Are you sure you want to delete?')" class="btn btn-outline-danger btn-sm waves-effect waves-light" type="button">Delete</a>
          | <a href="{{url('DatabaseBackup_now')}}" class="btn btn-success btn-sm waves-effect waves-light" type="button">Backup Now</a>        
        </td>
     </tr>


=============================  06. Yajra Datatable  =====================================
WEBSITE:-----------
  https://yajrabox.com/docs/laravel-datatables/10.0/quick-starter

CMD: 
    > composer require yajra/laravel-datatables
    > php artisan datatables:make Users
    > php artisan datatable:make RequestPendingVendor  --model  Vendor

 **Escape Vite option otherwise it will download all file
 ** use cdn


============================== 07. Use of Toaster  ==================================

<link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
  
  <script>
    @if ($errors->any())
        @foreach($errors->all() as $error)
            toastr.error("{{$error}}")
        @endforeach
    @endif

    @if ($message = Session::get('success'))
     toastr.success('{{$message}}')
    @endif
  </script>


================================== 08. Use of Sweetaler2 =================================




















