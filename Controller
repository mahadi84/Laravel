Date: 31/08/2023



============================== CRUD  and Excell download ==========================
<?php

namespace App\Http\Controllers\Backend;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

// Excel service provider
use Maatwebsite\Excel\Facades\Excel;
use App\Exports\JobsExport;


class JobController extends Controller
{

        private $model;
        public function __construct(){
            $this->model = new  \App\Models\Job;
        }


    public function all(Request $request){
        $data['title'] = 'Job list';
        $data['jobs'] = $this->model->getJobs($request);
        return view('Backend.Job.AllJobs.alljobs', $data);
    }

    public function export_jobs(Request $request){
       return Excel::download(new JobsExport, 'jobs.xlsx');
    }



    public function add_job(){
        $data['title'] = 'Add Job';
        return view('Backend.Job.AddJob.addjob', $data);
    }


    public function add_job_post(Request $request){

        $request->validate([
           'job_title'  => "required|min:3",
           'min_salary' => "required|numeric",
           'max_salary' => 'required|numeric'  
        ]);
         
        $job             = $this->model;
        $job->job_title  = trim($request->job_title);
        $job->min_salary = trim($request->min_salary);
        $job->max_salary = trim($request->max_salary);
       
            if($job->save()) {
                return redirect()->back()
                                 ->with('success', "Job: {$job->job_title} - registered successfull.");           
            }else {
                 return redirect()->back()
                                 ->with('error', 'Faild !! Something went wrong.');
            }     
    }


    public function edit_job($id){
        $data['title'] = 'Edit job';
        $data['job']   = $this->model->find($id);

        // dd($data['job']);
        return view('Backend.Job.EditJob.editjob', $data);
    }

    
    public function update_job(Request $request, $id){        
        $job= $this->model->find($id);
        $request->validate([
           'job_title'  => "required|min:3",
           'min_salary' => "required|numeric",
           'max_salary' => 'required|numeric'  
        ]);

            $job->job_title  = trim($request->job_title);
            $job->min_salary = trim($request->min_salary);
            $job->max_salary = trim($request->max_salary);

            if ($job->save()) {
                return redirect("admin/jobs")->with('success', 'Update successfull.');  
            }else{
                 return redirect()->back()->with('error', 'Faild...!!');
            }
    }

    public function delete_job(Request $request, $id){
       
            $job=$this->model->find($id);
            if ($request->isMethod('post')) {
                    if($job->delete()){
                        return redirect('admin/jobs')->with('success', 'Employee info deleted.');           
                    }else {
                        return redirect()->back()->with('error', 'Faild !! Something went wrong.');
                    }  
            }
             return view('Backend.Job.DeleteJob.delete_job', ['job'=> $job]);
    }

}

============================ My Profile IMAGE Controller ==============================================
<?php

namespace App\Http\Controllers\Backend;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Auth;
use Str;


class MyProfileImageController extends Controller
{

        private $userModel;
        public function __construct(){
            $this->userModel = new  \App\Models\User;
        }

        public function my_profile_image(){
         $data['title'] = 'Profile image';
         $data['me'] = $this->userModel->find(Auth::user()->id);   
         return view('Backend.MyProfileImage.ProfileImageShow.profile_image_show', $data);
    	}

        public function myprofile_image_edit(){
         $data['title'] = 'Edit my profile image';
         $data['me'] = $this->userModel->find(Auth::user()->id);
         return view('Backend.MyProfileImage.ProfileImageEdit.profile_image_edit', $data);
        }

    
   
    public function myprofile_image_update(Request $request){        
        $request->validate([
           'profile_image'   => ['required','image','mimes:jpg,png,jpeg', 'max:2048']
                                        // 'dimensions:min_width=100,min_height=100,max_width=1000,max_height=1000',                             
        ]);
  
        $me= $this->userModel->find(Auth::user()->id);        
                         if (!empty($me->profile_image) && file_exists('public/upload/images/'.$me->profile_image)) {
                            unlink('public/upload/images/'.$me->profile_image);
                         } 
                        $file= $request->file('profile_image');
                        $randomStr= Str::random(30);
                        $filename = $randomStr .'.'. $file->getClientOriginalExtension();

                        $file->move('public/upload/images/', $filename);
                        $me->profile_image = $filename;            
                
            if ($me->save()) {
                return redirect("admin/employees")->with('success', 'Update successfull.');  
            }else{
                 return redirect()->back()->with('error', 'Faild...!!');
            }
        }


}


=================================================== LOGIN CONTROLLER ===========================================
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

use Auth;
use Hash;
use Str;


class LoginController extends Controller
{

        private $model;

        public function __construct(){
            $this->model = new  \App\Models\User;
        }

    public function login(){

        if (empty(Auth::User()->id)) {
            $data['title'] = 'Login';
             return view('Login.login', $data);
        }
        else {
            return redirect('admin/dashboard');
        }
    }

    public function login_post(Request $request){

        if (Auth::attempt([
            'email'=>$request->email,
            'password'=>$request->password], true)) 
        {
            if (!empty(Auth::User()->status)) {
               
                    if (Auth::User()->is_role == '1') {
                        return redirect()->intended('admin/dashboard');
                    }else {
                        return redirect()->back()->with('error', 'You are not a HRM');
                    }
               
            } else {
                $user_id=Auth::user()->id;
                Auth::logout();
                $user=$this->model->find($user_id);
                return redirect()->back()->with('error', 'Your account is Inactive');

            }
                    
        } else {
            return redirect()->back()->with('error', 'Please enter the correct credentials');
        }

    }

    public function logout(){
            Auth::logout();                
            return redirect('/')->with('success', 'You are logged out!!');

    }

    public function register(){
          $data['title'] = 'Register';
        return view('Login.register', $data);
    }

    public function register_post(Request $request){
         $user= $request->validate([
           'name'                   => "required|min:3",
           'email'                  => "required|unique:users|max:100",
           'password'               => 'required',
           'confirm_password'       => 'required_with:password|same:password',
           'phone'                  => 'required|unique:users|string|digits:11',
           'hire_date'              => 'required',
           'job_title'              => 'required',
           'manager_name'           => 'required',
           'dept'                   => 'required'
        ]);

        $user                   = $this->model;
        $user->name             = $request->name;
        $user->email            = $request->email;
        $user->password         = $request->password;
        $user->phone            = $request->phone;
        $user->hire_date        = $request->hire_date;
        $user->job_title        = $request->job_title;
        $user->manager_name     = $request->manager_name;
        $user->dept             = $request->dept;
        $user->remember_token   = Str::random(50);

            if($user->save()) {
                return redirect()->back()
                                 ->with('success', "User: {$user->name} - registered successfull.");           
            }else {
                 return redirect()->back()
                                 ->with('error', 'Faild !! Something went wrong.');
            }     
    }


    public function CheckEmail(Request $request){
        $email= $request->email;
        $isExists= $this->model->where('email', $email)->first();
        if ($isExists) {
            return response()->json(array("exists" => true));
        } else {
            return response()->json(array("exists" => false));
        }
    }
    
    public function edit_user(){
          $data['title'] = 'Edit user';
        return view('Login.register', $data);
    }


    public function forgot_password(){
        $data['title'] = 'Fortgot password';
        return view('Login.forgot_password', $data);
    }



}



