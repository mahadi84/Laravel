Date: 11-Oct-2023

01. EXPORT & IMPORT with Matlab Excell.
02. Auto Unique ID Generator.
03. Create PDF with DOMpdf


=================== 01. EXPORT & IMPORT with Matlab Excell ====================

-------Controller:-----------
use Maatwebsite\Excel\Facades\Excel;
use App\Excel\Employees\Export\ExportEmployees;
use App\Excel\Employees\Import\ImportEmployees;

public function employee_import(Request $request){
    $data['title'] = 'Import';
    return view('Pages.Employee.Import.employee_import', $data);
}

public function emp_salary_import_post(Request $request){
    if ($request->hasFile('file')){
                $request->validate(['file'  => ['required','mimes:xlsx']]);
        }
    Excel::import(new ImportEmpSalary, $request->file);            
    return redirect()->back()->with('success', 'Bulk Data Upload successfull.'); 
}

public function employee_export(Request $request){
  return Excel::download(new ExportEmployees, 'employee.xlsx');
}

--------------Route:--------------------
    Route::get('employee-import', 'employee_import'); 
    Route::post('employee-import-post', 'employee_import_post'); 
    Route::get('employee-export', 'employee_export'); 

------------Import Page and Button Blade:--------
<a href="{{url('employee-import')}}" class="btn btn-rounded  btn-primary btn-md"> Import</a>
<a href="{{url('employee-export')}}" class="btn btn-rounded btn-success btn-md"> Export</a>
<br>
<h4 class="card-title">Import Bulk Employee</h4><br>
  @include('_message')<br>                                 
<form action="{{ url('employee-import-post') }}" method="POST"  enctype="multipart/form-data">
        @csrf
        <div class="form-group">
            <label for="file">File:</label>
            <input  name="file" type="file"  id="file" class="form-control">
        </div><br>
    <button class="btn btn-rounded btn-success btn-md waves-effect waves-light">Import File</button>
    <a href="{{  url('employee')}}" class="btn btn-outline-primary btn-md waves-effect waves-light" type="button">Back</a>
</form> 

----------------Import Controller:---------------
<?php
namespace App\Excel\Employees\Import;
use App\Models\Employee;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
class ImportEmployees implements ToModel, WithHeadingRow{
    public function model(array $row){
        return new Employee([
            'emp_id'            => $row['emp_id'],
            'name'              => $row['name'],
        ]);
    }
}

----------------Export-Page-Controller:-------
<?php
namespace App\Excel\Emp_Salary\Export;

use Maatwebsite\Excel\Concerns\FromCollection;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use Maatwebsite\Excel\Concerns\WithMapping;
use Maatwebsite\Excel\Concerns\WithHeadings;
use Maatwebsite\Excel\Concerns\WithEvents;
use Maatwebsite\Excel\Events\AfterSheet;
use Maatwebsite\Excel\Sheet;

use Request;

class ExportEmpSalary implements FromCollection, ShouldAutoSize, WithMapping, WithHeadings, WithEvents{

    private $model;
    public function __construct(){
        $this->model = new  \App\Models\EmpSalary;
    }


public function registerEvents(): array {
        return [ AfterSheet::class => [self::class, 'afterSheet']];
}

        public function collection(){           
        $request = Request::all();
        return $this->model->getSalary($request);
        }

        protected $index = 0;

        public function map($emp):array{
            // $createdAtFormat= date('d-m-Y', strtotime($job->created_at));
            return[
                ++$this->index,
                $emp->Employee->emp_id,
                $emp->Employee->name,
                $emp->salary,
                $emp->created_at->format('d-m-Y')
                // $createdAtFormat
            ];
        }

        public function headings():array{
            return ['S.No', 'Emp ID', 'Name','Salary', 'Created Date'];
        }

// ----------------------------For Style--------------------------

public static function afterSheet(AfterSheet $event){
    Sheet::macro('styleCells', function (Sheet $sheet, string $cellRange, array $style) {
        $sheet->getDelegate()->getStyle($cellRange)->applyFromArray($style);
    });

    $event->sheet->styleCells(
                'A1:E1',[
                    //Set font style
                    'font' => ['name'=>'Calibri','size'=>13,'bold'=>  true,'color'=>['argb'=>'000000'],],
                    //Set background style
                    'fill' => ['fillType' => \PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID,
                        'startColor' => ['rgb' => 'C0BDBC']           
                    ],
                    //Set allignment
                    'alignment' => [
                        'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER, //_LEFT, _RIGHT
                    ],
                ]
            );
}


} //End-of-Class


 ?>


02:-----------
<?php
namespace App\Excel\Employees\Export;
use App\Models\Employee;
use Maatwebsite\Excel\Concerns\FromCollection;

class ExportEmployees implements FromCollection{ 
    public function collection(){
        // return Employee::get(['emp_id','name']);
        return Employee::all();        
    }
}

======================  02. Auto UNIQUE ID Generator =========================
Controller:-------
use Haruncpi\LaravelIdGenerator\IdGenerator;

$prefix = date('Y');  
$emp_id = IdGenerator::generate(['table' => 'employees', 'field' => 'emp_id', 'length' => 8, 'prefix' =>$prefix]);

To Use in MODEL when id is used a primary key:-------
public static function boot(){
        parent::boot();
        self::creating(function ($model) {
            $model->order_number = IdGenerator::generate(['table' => 'orders', 'length' => 6, 'prefix' => date('y')]);
        });
    }


==========================03. PDF with DOM PDF===================================
Controller:-------
use PDF;

public function employee_pdf_create(Request $request, $id){
     $data['emp'] = $this->employeeModel->find($id);                 
        $pdf = PDF::loadView('Pages.Employee.PDF.employee_pdf', $data)
                            ->setPaper('a4')
                            ->setOption([
                                'enable_remote' => true,
                                'tempDir' => public_path(),
                                'chroot' => public_path(),
                                    ]);     
        // return $pdf->download('employee.pdf');
        return $pdf->stream('EMPID-'.$data['emp']->emp_id.'.pdf');
    }

Blade:-------
Use <img> NOT <image>



