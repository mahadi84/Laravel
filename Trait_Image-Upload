<?php
namespace App\Traits;
use Illuminate\Http\Request;
use File;
use Str;


trait ImageUploadTrait{

    public function uploadImage(Request $request, $inputName, $path){
        if($request->hasFile($inputName)){
            $image = $request->{$inputName};
            $ext = $image->getClientOriginalExtension();
            $randomStr= Str::random(30);
            $imageName = $randomStr.'.'.$ext;

            $image->move(public_path($path), $imageName);
           return $imageName;
        }
    }

    public function uploadMultiImage(Request $request, $inputName, $path)
    {
        $image = [];
        
        if($request->hasFile($inputName)){

            $images = $request->{$inputName};

            foreach($images as $image){

                $ext = $image->getClientOriginalExtension();
                $randomStr= Str::random(30);
                $imageName = $randomStr.'.'.$ext;

                $image->move(public_path($path), $imageName);

                $image[] =  $imageName;
            }

            return $image;
       }
    }

    public function updateImage(Request $request, $inputName, $path, $oldImage){
        if($request->hasFile($inputName)){                      
            if(File::exists(public_path( $path.'/'.$oldImage))){
                File::delete(public_path( $path.'/'.$oldImage));
            }
            $image = $request->{$inputName};
            $ext = $image->getClientOriginalExtension();
            $randomStr= Str::random(30);
            $imageName = $randomStr.'.'.$ext;

            $image->move(public_path($path), $imageName);
           return $imageName;
       }
    }


     /** Handle Delte File */
     public function deleteImage($path, $image){
        if(File::exists(public_path( $path.'/'.$image))){
            File::delete(public_path( $path.'/'.$image));
        }
     }
   
}
