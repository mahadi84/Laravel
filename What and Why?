Date: 31/08/2023


01. What is Traits? Class vs Traits?


================= 01. What is Traits? Class vs Traits? ======================
Traits are a collection of methods that can be incorporated into any other classes for reusability.
A classe:-- provide a complete implementation of a specific service or functionality, 
whereas 
A Traits:-- provide a set of methods that can be mixed into multiple classes to provide them with additional functionality.

TRAITS:---

namespace App\Http\Traits;
use Illuminate\Http\Request;
use App\Models\Student;


trait StudentTrait {

    public function uploadImage(Request, $request, $inputName, $width, $height, $path){
        if ($request->hasFile($inputName)) {
                        $request->validate([
                    'image'  => ['required','image','mimes:jpg,png,jpeg', 'max:2048'
                        // 'dimensions:min_width=100,min_height=100,max_width=1000,max_height=1000',
                        ],
                        ]);
                        $image= $request->file($inputName);
                        $randomStr= Str::random(30);
                        $image_name = $randomStr.'.'.$image->getClientOriginalExtension();

                        Image::make($image)->resize($width,$height)
                                        ->save(public_path($path).$image_name);
                                        //*save=move and size= width,height
                    return $path; 
            };
      }
    
    public function index() {
        // Fetch all the students from the 'student' table.
        $student = Student::all();
        return view('welcome')->with(compact('student'));
    }
}

CONTROLLER:---

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Http\Traits\StudentTrait;
class StudentController extends Controller
{
    use StudentTrait;
 
public function user(){
  $imagePath= $this->uploadImage($request, 'image', 'width', 'height', 'upload/user_images')
   $user->image= $imagePath;
  }

}























=========================================
01. What are NPM, and Composer?
02. Is the same a package.json and a composer.json?
03. What is node.js?



01. What are Composer and NPM?
-------------------------------
Doing php/symphony? try composer:----
Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them

Doing node? you do npm:-------
npm is the world's largest Software Registry. The registry contains over 800,000 code packages. Open-source developers use npm to share software.
So, it's very useful to grab some packages from it.


02. Is the same a package.json and a composer.json?
---------------------------------------------------
They are not the same:
package.json is a npm file to keep track of npm packages.
composer.json is a composer file to keep track of php packages.  the "json" files describe basic package information and dependencies.

03. What is node.js?
--------------------
Node.js is an open-source, cross-platform JavaScript runtime environment and library for running web applications outside the client's browser. 
Ryan Dahl developed it in 2009, and its latest iteration, version 15.14, 
was released in April 2021. Developers use Node.js to create server-side web applications, 
and it is perfect for data-intensive applications since it uses an asynchronous, event-driven model.




