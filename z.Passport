
01.Install Passport
	composer require laravel/passport

	Check with php artisan cmd
	whether passport:client, passport:install, passport:keys shows or not

	passport:client  | Create a client for issuing access tokens
	passport:install | Run the commands neccessary to prepare Passport for use
	passport:keys    | Create the encryption keys for Api Authentication

If time out error comes then run the bellow command
COMPOSER_MEMORY_LIMIT=-1 composer require laravel/passport

02. Migration
	php artisan migrate

03.User Model
	use Laravel\Passport\HasApiTokens;
	User Class{
		use HasApiTokens, HasFactory, Notifiable;
	}

04. Update config/auth.php like below api driver to passport

    'guards' => [
        'api' => [
            'driver' => 'passport',
            'provider' => 'users',
        ],
    ],

05. Update App\Providers\AuthServiceProvider

use Laravel\Passport\Passport;

In boot function add:
        Passport::tokensExpireIn(now()->addDays(15));
    	Passport::refreshTokensExpireIn(now()->addDays(30));
    	Passport::personalAccessTokensExpireIn(now()->addMonths(6));



06. Protect Route for Unauthorize Access:
   Add line to kernel.php
	protected $middlewareAliases = [
          'client.credentials' => \Laravel\Passport\Http\Middleware\CheckClientCredentials::class,
	]
--------------------------------GRAND TYPE: CLIENT--------------------------------------------

07. Add below lines to the controller with FUNCTIONS NAME I want to control (VID_180)
 Into UserController 
	public function __construct(){
        $this->middleware('client.credentials')->only(['store', 'resend']);
    	}

Into Other conroller	
 public function __construct(){
        $this->middleware('client.credentials')->only(['index', 'show']);
    }

08. Creat a client(php artisan passport:client) and test it (VID_181)

 	Which User ID should the client be assigned to?
	 0 (Press Enter)
	What should we name the Client?
	 Choose a name (Press Enter)
	Where should we redirect the request after authorization?
	(Press Only Enter)

**Copy the Client ID and Client Secret for use.


09. Open (Postman)  http://localhost:8000/oauth/token
 	/Body>form-data
 	grant_type: client_credentials
 	client_id: 
 	client_secret:
    AND send a POST request, It will generate 
	 token_type: 
	 expire-time: 
         access_token: 

10. Copy the access_token and go to protected url http://localhost:8000/products for example
    -Select auth type Oauth.2, Bearer and past the code

------------------------ GRAD TYPE : Both CLIENT and PASSWORD role in same user ------------------------
11. Go to Api controller and add:
      --Into ApiController.php
 	Public funtion __construct(){
	  $this->middleware('auth:api')
	}
	
      --To use only GRAND-TYPE: PASSWORD
	public function __construct(){
           parent::__construct();    
    	}
      
      --Here INDEX method only can CLIENT role user Where OTHER method(like store,update or destroy) need one user with both role:
	public function __construct(){
        	$this->middleware('auth:api')->except(['index']);
        	$this->middleware('client.credentials')->only(['index']);
         }

12. Create Password Account
	--php artisan passport:client --password
	
	What should we name the password grant client?[projectName Password Grant Client]
	>Choose and write and remember the name.mahadi for exmaple.
	Which user provider should this client use to retrive users?[users][0] users
	> Press Enter
	Password grant client created successfully.
	Client ID: 2
	Client secret: ReSO8Lu4ce1qY8itLC0uNgmnr5RUtyUKHcMXDsfR

13. Open (Postman)  http://localhost:8000/oauth/token
 	/Body>form-data
 	grant_type: password
 	client_id: 
 	client_secret:
	username:
	password:
    AND send a POST request, It will generate;
	 token_type: 
	 expire-time: 
         access_token: 
         refresh_token:

14. Copy the access_token and go to protected url http://localhost:8000/products for example
    -Select auth type Oauth.2, Bearer and PAST the access_token

-----------------------Frontend to create TOKEN--------------------

15. 
php artisan vendor:publish --tag=passport-config
php artisan vendor:publish --tag=passport-migrations
php artisan vendor:publish --tag=passport-views
    --It will published authorized.blade.php in resources/views/vendor/passport 
